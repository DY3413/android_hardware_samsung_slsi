/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


SECTIONS
{
    /* things that live in the main app image */
    .text : {
        KEEP (*(.vectors) ) ;
        . = ALIGN(512);
        __map_start = ABSOLUTE(.);
        KEEP (*(.bootargs) ) ;
        KEEP (*(.info) ) ;
        __map_end = ABSOLUTE(.);
        . = ALIGN(4);
        __cipc_args_start = ABSOLUTE(.);
        KEEP (*(.cipc_args) ) ;
        __cipc_args_end = ABSOLUTE(.);
        . = ALIGN(4);
        *(.text) *(.text.*) ;
        *(.rodata) *(.rodata.*) ;
        . = ALIGN(8);
        __internal_app_start = ABSOLUTE(.);
        KEEP (*(.internal_app_init) ) ;
        __internal_app_end = ABSOLUTE(.);
        . = ALIGN(4);
        __text_end = ABSOLUTE(.);
    } > code = 0xff

    .stack : {
        . = ALIGN(4);
        __stack_bottom = ABSOLUTE(.);
        KEEP ( *(.stack) );
        KEEP ( *(.stack.*) );
        . = ALIGN(4);
        __stack_top = ABSOLUTE(.);
    } > ram

    .data : {
        . = ALIGN(4);
        __data_start = ABSOLUTE(.);
        *(.data);
        *(.data.*);
        . = ALIGN(4);
        __data_end = ABSOLUTE(.);
     } > ram AT > code

    .bss : {
        . = ALIGN(4);
        __bss_start = ABSOLUTE(.);
        *(.bss) *(.bss.*) *(COMMON);
        . = ALIGN(4);
        __bss_end = ABSOLUTE(.);
    } > ram

    .neverinit : {
        . = ALIGN(4);
        *(.neverinit) *(.neverinit.*) ;
        . = ALIGN(4);
        __heap_start = ABSOLUTE(.);
    } > ram

    /*32 byte Guard Area that has READ ONLY attribute to detect stack overflow.*/
    .guardareaholder : {
        . = ABSOLUTE(__ipc_end) - 32;
        . = ALIGN(32);
        __guard_area_start = ABSOLUTE(.);
        LONG(0xffffffff);
        LONG(0xffffffff);
        LONG(0xffffffff);
        LONG(0xffffffff);
        LONG(0xffffffff);
        LONG(0xffffffff);
        LONG(0xffffffff);
        LONG(0xffffffff);
    } > ipc = 0xff
}

_BL = ORIGIN(bl);
__heap_end = ORIGIN(ram) + LENGTH(ram);
ENTRY(__VECTORS)
